
# user.py

"""
Here, we will define the user account managed by membrane.
"""

from AccessControl import ClassSecurityInfo
from zope.interface import implements

from Products.CMFCore.utils import getToolByName

from Products.Archetypes.public import Schema
from Products.Archetypes.public import StringField
from Products.Archetypes.public import StringWidget
from Products.Archetypes.public import registerType
from Products.Archetypes.public import LinesField
from Products.Archetypes.public import LinesWidget
from Products.Archetypes.public import MultiSelectionWidget

from Products.ATContentTypes.content.schemata import finalizeATCTSchema
from Products.ATContentTypes.content.base import ATCTContent

from Products.membrane.interfaces import IUserAuthProvider
from Products.membrane.interfaces import IUserAuthentication
from Products.membrane.interfaces import IPropertiesProvider
from Products.membrane.interfaces import IGroupsProvider
from Products.membrane.interfaces import IUserRoles
from Products.membrane.interfaces import IGroupAwareRolesProvider
from Products.membrane.utils import getFilteredValidRolesForPortal

from leocornus.sitesadmin.config import PROJECTNAME
from leocornus.sitesadmin.interfaces import IUserAccount

__author__ = "Sean Chen"
__email__ = "sean.chen@leocorn.com"

UserAccountSchema = ATCTContent.schema.copy() + Schema((

    StringField('userName',
                languageIndependent = 1,
                widget = StringWidget(description = "Username for a person.")
               ),

    StringField('password',
                languageIndependent = 1,
                widget = StringWidget(description = "Password.")
               ),

    StringField('fullname',
                languageIndependent = 1,
                user_property=True,
                widget = StringWidget(description = "Full name.")
               ),

    StringField('email',
                languageIndependent = 1,
                user_property=True,
                widget = StringWidget(description = "Email Address.")
               ),

    StringField('location',
                languageIndependent = 1,
                user_property=True,
                widget = StringWidget(description = "Location.")
               ),

    LinesField('sites',
               languageIndependent = 1,
               user_property=True,
               widget = LinesWidget(description = "How user associate with sites")
               ),

    LinesField(
        # not 'roles' b/c 'validate_roles' exists; stoopid Archetypes
        name="roles_",
        accessor='getRoles',
        mutator='setRoles',
        languageIndependent=1,
        vocabulary='getRoleSet',
        multiValued=1,
        widget=MultiSelectionWidget(
            label="Roles",
            description="Roles that member has.",
            ),
        ),
    ))

finalizeATCTSchema(UserAccountSchema)

class UserAccount(ATCTContent):
    """
    A simple member archetype
    """

    schema = UserAccountSchema

    # type, name
    meta_type = 'UserAccount'
    portal_type = 'UserAccount'
    archetype_name = 'UserAccount'

    _at_rename_after_creation = True

    __implements__ = (ATCTContent.__implements__)

    security = ClassSecurityInfo()

    implements(IUserAccount,
               IUserAuthProvider, IUserAuthentication,
               IPropertiesProvider, IGroupsProvider,
               IGroupAwareRolesProvider, IUserRoles)

    getRoleSet = getFilteredValidRolesForPortal

    #
    # IUserAuthentication implementation
    # 'getUserName' is auto-generated
    #
    def verifyCredentials(self, credentials):
        login = credentials.get('login')
        password = credentials.get('password')

        if login == self.getUserName():
            # it is a membrane user.
            if login.find('\\') < 0:
                # non-ops users
                if password == self.getPassword():
                    return True
            elif login.startswith('ext\\'):
                # non-ops users.
                if password == self.getPassword():
                    return True
            else:
                # ops users.
                ldapDomain, ldapLogin = login.split('\\')
                # verify through ldap plugin.
                userFolder = getToolByName(self, 'acl_users')
                ldapCredit = {'login' : ldapLogin,
                              'password' : password}
                ldapUserFolder = getattr(userFolder, 'ldap_%s' % ldapDomain)
                credit = ldapUserFolder.authenticateCredentials(ldapCredit)
                return credit
        else:
            # query the LDAP.
            # XXX Not support now!
            return False

    #
    # IUserRoles implementation
    # 'getRoles' is autogenerated

registerType(UserAccount, PROJECTNAME)
