=====================================
Testing Read and Write in a configlet
=====================================

This is a full-blown functional test. The emphasis here is on testing what
the user may input and see, and the system is largely tested as a black box.
We use PloneTestCase to set up this test as well, so we have a full Plone site
to play with. We *can* inspect the state of the portal, e.g. using 
self.portal and self.folder, but it is often frowned upon since you are not
treating the system as a black box. Also, if you, for example, log in or set
roles using calls like self.setRoles(), these are not reflected in the test
browser, which runs as a separate session.

Being a doctest, we can tell a story here. 

First, we must perform some setup. We use the testbrowser that is shipped
with Five, as this provides proper Zope 2 integration. Most of the 
documentation, though, is in the underlying zope.testbrower package.

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> portal_url = self.portal.absolute_url()

The following is useful when writing and debugging testbrowser tests. It lets
us see all error messages in the error_log.

    >>> self.portal.error_log._ignored_exceptions = ()

With that in place, we can go to the portal front page and log in. We will
do this using the default user from PloneTestCase:

    >>> from Products.PloneTestCase.setup import portal_owner, default_password

    >>> browser.open(portal_url)

We have the login portlet, so let's use that.

    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()

Here, we set the value of the fields on the login form and then simulate a
submit click.

We then test that we are still on the portal front page:

    >>> browser.url == portal_url
    True
    
And we ensure that we get the friendly logged-in message:

    >>> "You are now logged in" in browser.contents
    True

Now, we need install the product iscorpio.plonelab

    >>> setup_tool = getattr(self.portal, 'portal_setup')
    >>> r = setup_tool.runAllImportStepsFromProfile('profile-%s' % 'iscorpio.plonelab:default')
    >>> browser.getLink('Site Setup').click()
    >>> "iScorpio Plonelab Configuration" in browser.contents
    True

The plonelab installed successfully, let's double check the favorite color. 
It should be red!

    >>> browser.getLink('iScorpio Plonelab Configuration').click()
    >>> 'value="red"' in browser.contents
    True

Now we will change some values on this configlet form.

    >>> browser.getControl(name='form.favorite_color').value = 'new color'
    >>> browser.getControl(name='form.actions.save').click()
    >>> 'Changes saved' in browser.contents
    True

The new color should be saved in the portal_properties/plonelab_properties

    >>> props = self.portal.portal_properties.plonelab_properties
    >>> 'new color' == props.getProperty('favorite_color')
    True
